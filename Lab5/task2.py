from scipy.integrate import solve_ivp, odeint
import numpy as np

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Ä–∞–≤–Ω–µ–Ω–∏—è y' = 2x
def f(y, x):
    return 2 * x  # –ü—Ä–æ–∏–∑–≤–æ–¥–Ω–∞—è –ø–æ x

if __name__ == "__main__":
    # –ù–∞—á–∞–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è
    x0 = 0
    y0 = [1]  # y(0) = 1
    x_end = 3
    tolerance = 0.01  # –ó–∞–¥–∞–Ω–Ω–∞—è –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å


    # print(f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π –º–µ—Ç–æ–¥: RK45")
    # '''
    # –†–µ–∑—É–ª—å—Ç–∞—Ç: –ø—Ä–∏–±–ª–∏–∂–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ y(3)
    # [x0, x_end] ‚Äî –∏–Ω—Ç–µ—Ä–≤–∞–ª —Ä–µ—à–µ–Ω–∏—è –æ—Ç 0 –¥–æ 3,
    # y0 ‚Äî –Ω–∞—á–∞–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è ùë¶(0)=1
    # method ‚Äî –º–µ—Ç–æ–¥ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–∏—è, –≤ –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ –†—É–Ω–≥–µ-–ö—É—Ç—Ç–∞ 4-–≥–æ –ø–æ—Ä—è–¥–∫–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —ç—Ç–æ 'RK45').
    # rtol –∏ atol ‚Äî –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–∞—è –∏ –∞–±—Å–æ–ª—é—Ç–Ω–∞—è —Ç–æ—á–Ω–æ—Å—Ç–∏, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º atol –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å —Ç—Ä–µ–±—É–µ–º–æ–π —Ç–æ—á–Ω–æ—Å—Ç—å—é tolerance.
    # '''
    # sol = solve_ivp(f, [x0, x_end], y0, method='RK45', rtol=1e-3, atol=tolerance)
    #
    # y_approx = sol.y[0][-1]  # sol.y[0] ‚Äî –º–∞—Å—Å–∏–≤ —Ä–µ—à–µ–Ω–∏–π y, [-1] ‚Äî –ø–æ—Å–ª–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    #
    # print(f"–ü—Ä–∏–±–ª–∏–∂–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ y(3) = {y_approx}")

    print("–ò—Ç—Ç–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –ø–æ–¥–±–æ—Ä —Ç–æ—á–Ω–æ—Å—Ç–∏")

    y0 = y0[0]
    step = x_end - x0
    result = 0
    error = 1
    # –ï—Å–ª–∏ –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å –±–æ–ª—å—à–µ 0.01, —Ç–æ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ—á–µ–∫
    while error > tolerance:
        step /= 2
        x_field = np.arange(x0, x_end + 0.01, step)
        sol = odeint(f, y0, x_field)
        y3 = sol[-1][0]
        print(f"y(3) = {y3}")
        result = y3

        x_field_fine = np.arange(x0, x_end + 0.01, step / 100)
        sol_fine = odeint(f, y0, x_field_fine)
        y3_fine = sol_fine[-1][0]

        # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        error = abs(y3 - y3_fine)
        print(f"–ü–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å: {error}")

    print(f"–ò—Ç–æ–≥–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ y(3) = {result} —Å —Ç—Ä–µ–±—É–µ–º–æ–π —Ç–æ—á–Ω–æ—Å—Ç—å—é: {error}")
    print(f"–®–∞–≥: {step}")

